// metasupply/src/metasupply_frontend/src/services/agent/agent.ts

import { Actor, ActorSubclass, HttpAgent, Identity } from "@dfinity/agent";
import { idlFactory as metasupply_backend_idl, _SERVICE } from "declarations/metasupply_backend"; // Use alias from tsconfig

// Get the canister ID for the backend from the environment variables
// This ID is generated by dfx when you deploy your canisters.
export const canisterId = process.env.CANISTER_ID_METASUPPLY_BACKEND;

// Function to create an actor for the backend canister.
// An actor is a JavaScript object that provides a convenient way to call
// methods on a canister. It handles the serialization and deserialization
// of arguments and return values.
export const createActor = (
  canisterId: string | undefined, // The canister ID of the backend
  identity?: Identity // Optional identity for authenticated calls
): ActorSubclass<_SERVICE> => {
  // Check if the canister ID is defined. If not, it's a configuration error.
  if (!canisterId) {
    throw new Error(
      "Backend canister ID is not defined. Ensure DFX_NETWORK is set and canisters are deployed."
    );
  }

  // Determine the host based on the DFX_NETWORK environment variable.
  // For 'ic' (mainnet), no specific host is needed as the agent will infer it.
  // For local development, it points to the local replica.
  const host =
    process.env.DFX_NETWORK === "ic"
      ? "https://ic0.app"
      : "http://localhost:4943";

  // Create an HttpAgent. The agent is responsible for sending and receiving
  // messages to and from the Internet Computer.
  const agent = new HttpAgent({ host, identity });

  // If running locally, fetch the root key for the agent.
  // This is necessary for local development to allow the agent to verify
  // canister signatures. On the mainnet, this is not needed as the root key
  // is well-known.
  if (process.env.DFX_NETWORK !== "ic") {
    agent.fetchRootKey().catch((err) => {
      console.warn(
        "Unable to fetch root key. Check to ensure that your local replica is running"
      );
      console.error(err);
    });
  }

  // Create and return the actor for the backend canister.
  // `metasupply_backend_idl` is the Candid IDL definition generated by dfx,
  // which describes the public interface of your Rust canister.
  return Actor.createActor(metasupply_backend_idl, {
    agent,
    canisterId,
  });
};
